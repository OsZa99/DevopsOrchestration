version: "3.8"

services:
  spring-app-v1:
    build:
      context: .
      dockerfile: Dockerfile
    image: devops-application-v1:latest
    container_name: spring-app-v1
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/test?serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      APP_VERSION: v1
      APP_USER: User1
    depends_on:
      - mysql-db
    networks:
      - app-network

  spring-app-v2:
    build:
      context: .
      dockerfile: Dockerfile
    image: devops-application-v2:latest
    container_name: spring-app-v2
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/test?serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      APP_VERSION: v2
      APP_USER: User2
    depends_on:
      - mysql-db
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx-reverse-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - spring-app-v1
      - spring-app-v2
    networks:
      - app-network

  mysql-db:
    image: mysql:5.7
    container_name: mysql-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/monannuaire_mysql.sql:/docker-entrypoint-initdb.d/monannuaire_mysql.sql
    networks:
      - app-network

  backup:
    image: mysql:5.7
    container_name: mysql-backup
    volumes:
      - ./backups:/backups
    entrypoint: >
      /bin/sh -c "while true; do
      mysqldump -h mysql-db -u root -proot test > /backups/dump-$(date +%F-%H-%M).sql;
      sleep 43200;
      done"
    depends_on:
      - mysql-db
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql-db
      MYSQL_ROOT_PASSWORD: root
    depends_on:
      - mysql-db
    networks:
      - app-network


  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - app-network


volumes:
  mysql_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:

networks:
  app-network: